package honours.smartads_agent.gui;

/**
 * 
 */

/**
 * @author HERVE NG
 * Graphical user interface Class for displaying stuff
 *
 */

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.EmptyBorder;

import com.sun.prism.image.CompoundTexture;

import honours.smartads_agent.datareader.AgentAlgorithmEvaluations;
import honours.smartads_agent.datareader.UtilityObject;
import honours.smartads_agent.models.Graph;
import honours.smartads_agent.models.ItemAds;
import honours.smartads_agent.models.SinglyLinkedList;
import honours.smartads_agent.models.User;

public class AdvertiserUI extends JFrame{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	//buttons variables
	private JButton btnshowAds;
	private JButton btnEvaluateReward;
	//private JButton btnSelectAd;
	private int newAdCounts = 0;
	//private JButton btnAddUser;
	private JButton btndeleteUser;
	private JButton btnDeleteAd;
	private JButton btnCreateAd;
	private JButton btnDisplayAdInfo;
	private JButton btnViewCustUI;
	//private JButton btnPerformanceInsight;
	//private JButton btnRefresh;
	private JButton btnLinkAds;
	//private JButton btnbestAd;
	private JScrollPane scPane;
	//private JTextArea txtBestAdDisplay;
	private JTextArea txtAreaItemList;
	//private SinglyLinkedList<ItemAds> itemsinglList;
	
	//Panels variable
	private JPanel pnlTop;
	//private JPanel pnlButton;
	//private JPanel pnltxt;
	//private JPanel pnlWrapper;
	private JPanel pnlBottom;
	private String path;
	public static Graph<User> userGraph;
	public static int newUsers = 0;

	private SinglyLinkedList<User> userlist;
	private CustomerUI ui = null;
	private ArrayList<Double> AdsProbofChoice = null;

	
	//private Graph<ItemAds> item;
	//private Agent_Program agent_program;
	
	public AdvertiserUI(String heading, String path) {
		this.setTitle(heading);
		this.setPath(path);
		AdsProbofChoice = new ArrayList<>();

		//agent_program = new Agent_Program(item);
		btnLinkAds = new JButton("Generate Recommendations");
		//btnUnlinkAds = new JButton("Unlink associated Ads");
		btnshowAds = new JButton("View Records");
		btnEvaluateReward = new JButton("Evaluate Average Reward");
		//btnSelectAd = new  JButton("Select an Ad");
		//btnSetNumUsers = new JButton("Set the Number of Users");
		//btnAddUser = new JButton("Add a User");
		btnDisplayAdInfo = new JButton("View Ad/User Insight");
		btnViewCustUI = new JButton("View Customer UI");
		//btnPerformanceInsight = new JButton("Performance Insight");
		btnCreateAd = new JButton("Create Ad");
		
		txtAreaItemList = new JTextArea();
		scPane = new JScrollPane(txtAreaItemList);
		//btnRefresh = new JButton("Refresh");
		btndeleteUser = new JButton("Delete Record");
		btnDeleteAd = new JButton("Remove Ad");
		//btnbestAd = new JButton("Display most selected Item");
		//txtBestAdDisplay = new JTextArea();
		
		//Adding to Panel
		
		pnlTop = new JPanel();
		pnlTop.setLayout(new BorderLayout());
		pnlTop.setSize(600, 80);
		pnlTop.setBorder(new EmptyBorder(10, 10, 10, 10));
		pnlTop.setBackground(Color.DARK_GRAY);
		
		JLabel lblTitle = new JLabel();
		lblTitle.setText("Recommeder System Based on Multi-Armed Bandit (MAB) Alogrithms");
		lblTitle.setForeground(Color.white);
		//lblTitle.setFont();
		pnlTop.add(lblTitle);

		JPanel pnlButton = new JPanel();
		pnlButton.setLayout(new GridLayout(2,4));
		pnlButton.setBorder(new EmptyBorder(10,10,10,10));
		pnlButton.add(btnshowAds);
		//pnlButton.add(btnSetNumUsers);
		//pnlBottom.add(btnAddUser);
		pnlButton.add(btnDisplayAdInfo);
		pnlButton.add(btnViewCustUI);
		pnlButton.add(btnEvaluateReward);

       	JPanel pnltxt = new JPanel();
		
		pnltxt.setLayout(new GridLayout(1,1));
		txtAreaItemList.setEditable(false);
		//txtAreaItemList.setSize(240, 320);
		txtAreaItemList.setMargin(new Insets(10,10,10,10));
		pnltxt.add(scPane);
		pnltxt.setBorder(new EmptyBorder(10,10,0,10));
		
		//Instantiate Wrapper panel.
		JPanel pnlWrapper = new JPanel();
		
		pnlWrapper.setLayout(new BorderLayout());
		
		pnlButton.setSize(20, 640);
		pnlWrapper.add(pnlButton, BorderLayout.NORTH);
		pnlWrapper.add(pnltxt, BorderLayout.CENTER);
		
		pnlBottom = new JPanel();
        
        pnlBottom.setLayout(new GridLayout(2,4));
        pnlBottom.setBorder(new EmptyBorder(10,10,10,10));
		pnlBottom.add(btndeleteUser);
		pnlBottom.add(btnDeleteAd);
		pnlBottom.add(btnCreateAd);
		//pnlBottom.add(btnLinkAds);
		//pnlBottom.add(btnUnlinkAds);
		pnlBottom.add(btnLinkAds);
		
		
		add(pnlTop, BorderLayout.NORTH);
		add(pnlWrapper, BorderLayout.CENTER);
		add(pnlBottom, BorderLayout.SOUTH);
		
		//Adding items to the graph
		userlist = UtilityObject.readFileGraph(path);
		userGraph = UtilityObject.createUserItemGraph(userlist);
		
		/*slist = new JComboBox<>();
		slist.setVisible(true);
		slist.setLightWeightPopupEnabled(false);
        //User locations
        ArrayList<String> userlocations = new ArrayList<>();
        userlocations.add("AucklandPark: -26.182704 28.004080");
        userlocations.add("MelvilleJohannesburg: -26.174981 28.008269");
        userlocations.add("Westdene: -26.180601 27.986958");
        userlocations.add("Johannesburg: -26.205075 28.038672");
        userlocations.add("Milpark: -26.179172 28.015649");
        combouserloc = new JComboBox<String>(userlocations.toArray(new String[userlocations.size()]));
        combouserloc.setVisible(true);
        combouserloc.setLightWeightPopupEnabled(false);*/
		
		//Action Listeners
		
		btnshowAds.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				/*ArrayList<String> starr = File_Reader.readCSVFile(path);
				txtAreaItemList.setText("");
				txtAreaItemList.append("The following records show a list of user record "
						+ "of the history of clicks for 10 Items\n\n");
				int num = 0;
				for (String string : starr) {
					num++;
					txtAreaItemList.append("User Click Record" + num + ": "+string + "\n");
				}*/
				
				String display = "";

				display += ("The following records show a list of user record "
						+ "of the history of clicks for " + 
						userGraph.getAllVertices().iterator().next().getAdItems().size()
						+ " Items\n\n");
				
				for (User us : userGraph.getAllVertices()) {
					display += "Record: " + us.getUserName() + " - " + us.toString() +"\n";
				}
				txtAreaItemList.setText("");
				txtAreaItemList.append(display);
			}
		});
		
		btnEvaluateReward.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				//String result = agent.EvaluteUCBReward();
				createParamEvaluationForm();
				/*String param = JOptionPane.showInputDialog("Please enter the evaluation "
						+ "parameters in the form 'NumberofIteratons_EpsilonValue_TauValue'");
				String[] paramSplit = param.split("_");
				int numtrials = Integer.parseInt(paramSplit[0]);
				double eps = Double.parseDouble(paramSplit[1]);
				double tau = Double.parseDouble(paramSplit[2]);
				String displ = AgentAlgorithmEvaluations.computeAlgorithms(userGraph, numtrials, eps, tau);
				txtAreaItemList.setText("");
				txtAreaItemList.append(displ);*/
			}
		});
		
		//adding a new ad
		btnCreateAd.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				newAdCounts++;
				String adCode = "NewAd" + newAdCounts;
				String adName = JOptionPane.showInputDialog("Ad Name");
				String adDescrip = JOptionPane.showInputDialog("Ad Description");
				ItemAds newAd = new ItemAds(adName, adDescrip, adCode, 0);
				for (User us : userGraph.getAllVertices()) {
					us.getAdItems().add(newAd);
				}
				JOptionPane.showMessageDialog(null, newAd.getAdName()+"("+newAd.getIdValue()+") "
						+ "has been successfully Added!", "Confirmation Message", JOptionPane.INFORMATION_MESSAGE);
				txtAreaItemList.setText("");
				txtAreaItemList.append(viewAdInsight());

			}
		});
		
		//adding a new user
		btnViewCustUI.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				//Add windowLister to graphView Frame.
				ui = new CustomerUI(userGraph);
				
				ui.addWindowListener(new WindowAdapter() {
					public void windowClosing(WindowEvent e) {
						new Thread() {
							public void run() {
								//Disable btnVisualRep after it has been clicked 
								btnViewCustUI.setEnabled(true);
							}
						}.start();
						
					}
				});
				ui.setVisible(true);
				btnViewCustUI.setEnabled(false);
			}
		});
		
		//removing an Item from the graph
		btnDeleteAd.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				if(userGraph != null) {
					boolean isfound = false;
					String itCode = JOptionPane.showInputDialog("Enter Item Code");
					for(User us : userGraph.getAllVertices()) {
						for (int i = 0; i < us.getAdItems().size(); i++) {
							//isfound = false;
							if(us.getAdItems().get(i).getIdValue().equals(itCode)) {
								us.getAdItems().remove(i);
								isfound = true;
							}
						}
					}
					if(isfound == true) {
						JOptionPane.showMessageDialog(null, "("+itCode+") "
								+ "has been successfully removed!", "Confirmation Message", JOptionPane.INFORMATION_MESSAGE);
						txtAreaItemList.setText("");
						txtAreaItemList.append(viewAdInsight());
					}
				}
			}
		});
		
		//deleting a user
		btndeleteUser.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				boolean isfound = false;
				User delUs = null;
				String delUser = JOptionPane.showInputDialog("Enter the ID of record to delete user");
				for(User us : userGraph.getAllVertices()) {
					if(us.getUserID().equals(delUser)) {
						delUs = us;
						isfound = true;
					}
				}
				if(isfound) {
					userGraph.removeVertex(delUs);
					JOptionPane.showMessageDialog(null, "("+delUser+") "
							+ "has been successfully removed!", "Confirmation Message", JOptionPane.INFORMATION_MESSAGE);
				} else {
					JOptionPane.showMessageDialog(null, "("+delUser+") "
							+ "User record not found!!!", "Confirmation Message", JOptionPane.INFORMATION_MESSAGE);
				}
			}
		});
		
		//viewing insight
		btnDisplayAdInfo.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				if(userGraph == null) {
					JOptionPane.showMessageDialog(null, "No Record selected!", "Warning", JOptionPane.WARNING_MESSAGE);
				}else {
					String code = JOptionPane.showInputDialog("Enter Record ID");
					System.out.println(code);
					viewInsight(code);
				}
			}
		});	
		
		//generating recommendation by clustering users based on 
		//their preferences and the average probability of choosing various ads determined by the MAB algorithm
		btnLinkAds.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				UserCluster();
			}
		});
	}
	
	public static String viewAdInsight() {

		String strshow = "";
		strshow += "\nList of Ad Items: \n";

		for (ItemAds ad : userGraph.getAllVertices().iterator().next().getAdItems()) {
			strshow += ad.toString() + "\n";
		}
		
		return strshow;
	}
	
	private void createParamEvaluationForm() {
		JFrame param_form;
		//JTextArea txtusrAds = new JTextArea();
		//JScrollPane sctxt = new JScrollPane(txtusrAds);
		JLabel lblTitle = new JLabel();
		//labels
		JLabel lblUCB = new JLabel();
		JComboBox<String> ucbiterations = new JComboBox<String>();
		ucbiterations.setVisible(true);
		ucbiterations.setLightWeightPopupEnabled(false);
		ucbiterations.addItem("1000");
		ucbiterations.addItem("1500");
		ucbiterations.addItem("2000");
		ucbiterations.addItem("3000");
		ucbiterations.addItem("5000");
		ucbiterations.addItem("10000");
		JComboBox<String> egreedyiterations = new JComboBox<String>();
		egreedyiterations.setVisible(true);
		egreedyiterations.setLightWeightPopupEnabled(false);
		egreedyiterations.addItem("1000");
		egreedyiterations.addItem("1500");
		egreedyiterations.addItem("2000");
		egreedyiterations.addItem("3000");
		egreedyiterations.addItem("5000");
		egreedyiterations.addItem("10000");
		JComboBox<String> softmaxiterations = new JComboBox<String>();
		softmaxiterations.setVisible(true);
		softmaxiterations.setLightWeightPopupEnabled(false);
		softmaxiterations.addItem("1000");
		softmaxiterations.addItem("1500");
		softmaxiterations.addItem("2000");
		softmaxiterations.addItem("3000");
		softmaxiterations.addItem("5000");
		softmaxiterations.addItem("10000");
		
		JComboBox<String> egreedyEps = new JComboBox<String>();
		egreedyEps.setVisible(true);
		egreedyEps.setLightWeightPopupEnabled(false);
		egreedyEps.addItem("0.0");
		egreedyEps.addItem("0.01");
		egreedyEps.addItem("0.05");
		egreedyEps.addItem("0.1");
		egreedyEps.addItem("0.2");
		egreedyEps.addItem("0.4");
		egreedyEps.addItem("0.5");
		egreedyEps.addItem("0.01");
		egreedyEps.addItem("1.0");

		
		JComboBox<String> softmaxtau = new JComboBox<String>();
		softmaxtau.setVisible(true);
		softmaxtau.setLightWeightPopupEnabled(false);
		softmaxtau.addItem("1.0");
		softmaxtau.addItem("0.01");
		softmaxtau.addItem("0.05");
		softmaxtau.addItem("0.1");
		softmaxtau.addItem("0.2");
		softmaxtau.addItem("0.4");
		softmaxtau.addItem("0.5");
		
		
		//panels
		JPanel pnlucb = new JPanel();
		JPanel pnlegreedy = new JPanel();
		JPanel ppnlsoftmax = new JPanel();
		//setting up the panel
		JPanel pnltxt = new JPanel();
		JPanel pnltop = new JPanel();
		JButton btneveUCB = new JButton("Evaluate UCB    ");
		JButton btnevegreedy = new JButton("Evaluate Egreedy");
		JButton btnevesoftmax = new JButton("Evaluate Softmax");
		

		JButton btnrunExp = new JButton("Run Experiments");
		btnrunExp.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				int selectedIter = Integer.parseInt(ucbiterations.getItemAt
									(ucbiterations.getSelectedIndex()));
				double eps = Double.parseDouble(egreedyEps.getItemAt(egreedyEps.getSelectedIndex()));
				double tau = Double.parseDouble(softmaxtau.getItemAt(softmaxtau.getSelectedIndex()));
				txtAreaItemList.setText("");
				txtAreaItemList.append(AgentAlgorithmEvaluations.computeAlgorithms
						(AdvertiserUI.userGraph, selectedIter, eps, tau));				
			}
		});
		
		btneveUCB.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				int selectedIter = Integer.parseInt(ucbiterations.getItemAt
									(ucbiterations.getSelectedIndex()));
				txtAreaItemList.setText("");
				txtAreaItemList.append(AgentAlgorithmEvaluations.ComputeUCB
							(AdvertiserUI.userGraph, selectedIter));
				
				AdsProbofChoice = AgentAlgorithmEvaluations.dataobjucb.getAveRewardsperAd();
			}
		});
		
		btnevegreedy.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				int selectedIter = Integer.parseInt(egreedyiterations.getItemAt
									(egreedyiterations.getSelectedIndex()));
				double eps = Double.parseDouble(egreedyEps.getItemAt(egreedyEps.getSelectedIndex()));
				txtAreaItemList.setText("");
				txtAreaItemList.append(AgentAlgorithmEvaluations.computeEgreedy
							(AdvertiserUI.userGraph, eps, selectedIter));
				AdsProbofChoice = AgentAlgorithmEvaluations.egreedytest.getAveRews();

			}
		});
		
		btnevesoftmax.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				int selectedIter = Integer.parseInt(softmaxiterations.getItemAt
									(softmaxiterations.getSelectedIndex()));
				double tau = Double.parseDouble(softmaxtau.getItemAt(softmaxtau.getSelectedIndex()));
				txtAreaItemList.setText("");
				txtAreaItemList.append(AgentAlgorithmEvaluations.computerSoftmax
						(AdvertiserUI.userGraph, tau, selectedIter));
				
				AdsProbofChoice = AgentAlgorithmEvaluations.softmax.getAveRews();

			}
		});
		
		
		lblTitle.setText("Multiarmed Bandit Algorithm Evaluation Parameters Form");
		lblTitle.setForeground(Color.black);
		pnltop.add(lblTitle, BorderLayout.NORTH);
		
		lblUCB.setText("1)  UCB Evaluation Parameters        ");
		lblTitle.setForeground(Color.black);
		//txtusrAds.setText("");
		//txtusrAds.append("");	

		//adding items to the panel
		//pnltxt.setLayout(new GridLayout(1,1));
		//txtusrAds.setEditable(false);
		//txtusrAds.setSize(240, 320);
		//txtusrAds.setMargin(new Insets(10,10,10,10));
		
		pnltxt.add(lblUCB);
		pnlucb.setLayout(new GridLayout(2,1));
		pnlucb.setBorder(new EmptyBorder(10,10,10,10));
		pnlucb.add(new JLabel("UCB Number of simulations: "));
		pnlucb.add(ucbiterations);
		pnlucb.add(btneveUCB);
		pnltxt.add(pnlucb, BorderLayout.NORTH);

		pnltxt.add(new JLabel("2)  Eps-greedy Evaluation Parameters     "));
		pnlegreedy.setLayout(new GridLayout(3,1));
		pnlegreedy.setBorder(new EmptyBorder(10,10,10,10));
		pnlegreedy.add(new JLabel("Egreedy Number of simulations: "));
		pnlegreedy.add(egreedyiterations);
	
		pnlegreedy.add(new JLabel("Value of Epsilon: "));
		pnlegreedy.add(egreedyEps);
		pnlegreedy.add(btnevegreedy);
		//pnlegreedy.add();
		pnltxt.add(pnlegreedy);

		
		pnltxt.add(new JLabel("3)  SoftMax Evaluation Parameters      "));
		ppnlsoftmax.setLayout(new GridLayout(3,1));
		ppnlsoftmax.setBorder(new EmptyBorder(10,10,10,10));
		ppnlsoftmax.add(new JLabel("Softmax Number of simulations: "));
		ppnlsoftmax.add(softmaxiterations);
		ppnlsoftmax.add(new JLabel("Value of tau (temperature): "));
		ppnlsoftmax.add(softmaxtau);
		ppnlsoftmax.add(btnevesoftmax);
		
		pnltxt.add(ppnlsoftmax, BorderLayout.SOUTH);
		
		pnltxt.setBorder(new EmptyBorder(10,10,0,10));
		param_form = new JFrame("Customer Frame");
		param_form.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		param_form.add(pnltop, BorderLayout.NORTH);
		param_form.add(pnltxt, BorderLayout.CENTER);
		param_form.add(btnrunExp, BorderLayout.SOUTH);
		param_form.setSize(500, 500);
		param_form.setLocationRelativeTo(null);
		
		//Add windowLister to graphView Frame.
		param_form.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				new Thread() {
					public void run() {
						//Disable btnVisualRep after it has been clicked 
						btnEvaluateReward.setEnabled(true);
					}
				}.start();
				
			}
		});
		
		param_form.setVisible(true);
		btnEvaluateReward.setEnabled(false);
	}
	
	/**
	 * this method displays information about a specific record
	 * @param adcode
	 */
	private void viewInsight(String usID) {
		User targetUs = null;
		
		for(User us : userGraph.getAllVertices()) {
			String Code = us.getUserID();
			if(Code.equals(usID)) {
				targetUs = us;
			}
		}
		if(targetUs != null) {
			if(targetUs.getUserID().equals(usID)) {
				txtAreaItemList.setText("");
				txtAreaItemList.append(targetUs.QueryRecords());
				txtAreaItemList.append("\n");
				txtAreaItemList.append("Users with similar items: ");
				//Display list partner users with similar choice of items
				for(User us : userGraph.getNeighbors(targetUs)) {
					txtAreaItemList.append("\t"+us.getUserName()+"("+us.QueryRecords()+") \n");
				}
				txtAreaItemList.append("\n");
				txtAreaItemList.append("Potential Users with similar Items: \n");
				/*for(User n : userGraph.getNeighbors(targetUs)) {
					//Display list of potential partner users
					for(User p : userGraph.getNeighbors(n)) {
						//Exclude current country and its partners.
						if(p.compareTo(targetUs) != 0 ) {
							if(!userGraph.isAdjacent(p, targetUs)) {
								txtAreaItemList.append("\t"+p.QueryRecords()+") \n");
							}
						}
					}
				}*/
				txtAreaItemList.append("\n\n");
			}else {
				JOptionPane.showMessageDialog(null, usID + " was not found.", 
						"Search result", JOptionPane.INFORMATION_MESSAGE);
			}
		} else {
			JOptionPane.showMessageDialog(null, usID+" was not found.", 
					"Search result", JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	private void UserCluster() {
		ArrayList<ItemAds> ads = AdvertiserUI.userGraph.getAllVertices().
				iterator().next().getAdItems();
		
		for (User user : AdvertiserUI.userGraph.getAllVertices()) {
			ArrayList<ItemAds> itemChoices = user.getAdItems();
			for (ItemAds item : itemChoices) {
				if(item.getSelIndex() == 1) {
					ArrayList<User> similar = getUserSelItem(item.getIdValue());
					//for (User user2 : similar) {
					for(int i = 0; i < 10; i++) {
						User us2 = similar.get(i);
						addEdgeItem(user, us2);
					}
				}
			}
			
		}
	}
	
	private ArrayList<User> getUserSelItem(String itemCode){
		ArrayList<User> users = new ArrayList<>();
		for (User user : AdvertiserUI.userGraph.getAllVertices()) {
			ArrayList<ItemAds> itemChoices = user.getAdItems();
			for (ItemAds item : itemChoices) {
				if(item.getIdValue().equals(itemCode) && item.getSelIndex() == 1) {
					users.add(user);
				}
			}
		}
		
		return users;
	}
	
	/**
	 * removing the relationship between 2 Item in the graph
	 * @param item1
	 * @param item2
	 */
	@SuppressWarnings("unused")
	private void removeEdgeItem(User us1, User us2) {
		int result =JOptionPane.showConfirmDialog(null, "Do you really want to end association between "
					+us1.getUserName()+"\n and "+us2.getUserName()+"?");
		if(result==JOptionPane.YES_OPTION) {
			if(userGraph.isAdjacent(us1, us2)) {
				userGraph.removeEdge(us1, us2);
				JOptionPane.showMessageDialog(null, us1.getUserName()+"("+us1.getUserName()+") and "+
						us2.getUserName()+"("+us2.getUserName()+") are no longer linked!", 
						"Confirmation Message",	JOptionPane.INFORMATION_MESSAGE);
			}
		}		
	}
	
	/**
	 * Adding a relationship between 2 hospitals in the graph
	 * @param item1
	 * @param item2
	 */
	@SuppressWarnings("unused")
	private void addEdgeItem(User us1, User us2) {
		
		if(!userGraph.isAdjacent(us1, us2)) {
			userGraph.addEdge(us1, us2);
		} else {
			//System.out.println("Error Linking the users");
		}
	}

	/**
	 * @return the path
	 */
	public String getPath() {
		return path;
	}

	/**
	 * @param path the path to set
	 */
	public void setPath(String path) {
		this.path = path;
	}
}
