/**
 * 
 */
package honours.smartads_agent.datareader;

import java.util.ArrayList;

import org.jfree.data.category.DefaultCategoryDataset;

import honours.smartads_agent.gui.AdvertiserUI;
import honours.smartads_agent.models.EgreedyAlgorithm;
import honours.smartads_agent.models.Graph;
import honours.smartads_agent.models.ItemAds;
import honours.smartads_agent.models.SoftmaxAlgorithm;
import honours.smartads_agent.models.UCB_RandAlgorithms;
import honours.smartads_agent.models.User;

/**
 * @author HERVE NG
 *
 */
public class AgentAlgorithmEvaluations {

	public static DataObjectUCB dataobjucb;
	public static DataObjectGreedy egreedytest;
	public static DataObjectSoftmax softmax;
	public static String randomApp;

	/**
	 * 
	 */
	public AgentAlgorithmEvaluations() {
		// TODO Auto-generated constructor stub
	}
	

	/**
	 * @param path
	 */
	public static String computeAlgorithms(Graph<User> usergraph, int numtrials, double eps, double tau) {
		String strRet = "";

		strRet += ComputeUCB(usergraph, numtrials);
		strRet += computeEgreedy(usergraph, eps, numtrials);
		strRet += computerSoftmax(usergraph, tau, numtrials);
		computeRandom(usergraph, numtrials);
		
		
		strRet += randomApp;
		
		//Combined Approach
		ArrayList<Double> aveMeanRews = new ArrayList<>();
		int maxindex = 0;
		int maxcount = 0;
		
		strRet += "***Combined Algorithms Approach***\nTotal Reward: " + softmax.getSumofReward() + "\n";
		
		for (int y = 0; y < dataobjucb.getAveRewardsperAd().size(); y++) {
			double alg1ucbAv = dataobjucb.getAveRewardsperAd().get(y);
			double alg2greAv = egreedytest.getAveRews().get(y);
			double alg3sofAv = softmax.getAveRews().get(y);
			
			double aveSum = alg1ucbAv + alg2greAv + alg3sofAv;
			double aveMean = aveSum / 3;
			aveMeanRews.add(aveMean);
			strRet += "Ad Index: " + y + " (Average probability: " + aveMean + ")\n";
			if(maxcount < aveMean) {
				maxindex = y;
			}
		}
		strRet += "The maximum ad index is: " + maxindex;
		
		DefaultCategoryDataset dataset = new DefaultCategoryDataset();
		int coun = 0;
		for (Double rew : aveMeanRews) {
			coun++;
			dataset.setValue(rew, "Selection: " + coun, "Ad" + coun);
		}
		//UtilityObject.viewChartRepres(dataset, "Combined Algorithms Mean Rewards for Various Ads");
		
		
		//evaluate egreedy average reward per iteration
		//writing data to file
		SaveDataToFile.writeTofile("data/epsgreedydataplotaveRewPerIter.csv", 
				SaveDataToFile.storeAlgoRewPerIter(dataobjucb.getAveReturnperIter()));
		//comparison per iteration of average reward of the best arm over different algorithms
		SaveDataToFile.writeTofile("data/aveRewPerIterPerAlg.csv", 
				SaveDataToFile.storeAlgoRewPerIterComparison(dataobjucb.getAveReturnperIter(),
						egreedytest.getIterAveRews(), softmax.getAveRewperIter()));
		
		//getting the ad names
		ArrayList<String> names = new ArrayList<>();
		for (ItemAds item : AdvertiserUI.userGraph.getAllVertices().iterator().next().getAdItems()) {
			names.add(item.getAdName());
		}
		
		//writing data to file
		SaveDataToFile.writeTofile("data/aveRewdataplot.csv", 
				SaveDataToFile.storeAveRewardComparison(dataobjucb.getAveRewardsperAd(),
					egreedytest.getAveRews(), softmax.getAveRews(), aveMeanRews, names));
	    SaveDataToFile.writeTofile("data/algIterdataplot.csv", 
	    		SaveDataToFile.storeAlgoCumRewPerIterComparison(dataobjucb.getSumofRewardsperIter(),
	    				egreedytest.getCumrewards(), softmax.getRewards()));
		
	    //initialise eps experiment value for egreedy test
		ArrayList<Double> epsValues = new ArrayList<>();
		epsValues.add(0.1);
		epsValues.add(0.2);
		epsValues.add(0.3);
		epsValues.add(0.4);
		epsValues.add(0.5);
		ArrayList<ArrayList<Integer>> expResult = 
				runEgreedyExperiment(usergraph, epsValues); //run exp with various eps values
	    
		//write result to file
		SaveDataToFile.writeTofile("data/epsgreedydataplot.csv",  
	    		SaveDataToFile.storeEgreedyComparison(expResult.get(0), expResult.get(1),
	    				expResult.get(2), expResult.get(3), expResult.get(4)));
		
		//initialise tau experiment value for softmax test
		ArrayList<Double> tauValues = new ArrayList<>();
		tauValues.add(0.1);
		tauValues.add(0.2);
		tauValues.add(0.3);
		tauValues.add(0.4);
		tauValues.add(0.5);
		ArrayList<ArrayList<Integer>> expSoftResult = 
				runSoftmaxExperiment(usergraph, tauValues); //run exp with various tau values
	    
		//write result to file
		SaveDataToFile.writeTofile("data/tausoftmaxdataplot.csv",  
	    		SaveDataToFile.storeSoftmaxComparison(expSoftResult.get(0), expSoftResult.get(1),
	    				expSoftResult.get(2), expSoftResult.get(3), expSoftResult.get(4)));
		
		//executing the plot file
		SaveDataToFile.openDataOutput("runplotfiles.bat");
		//SaveDataToFile.readImageFiletoGUI("data/aveRewdataplot.svg");
		 
		
		return strRet;
	}

	/**
	 * @param usergraph
	 * @param tauVals
	 * @return
	 */
	public static ArrayList<ArrayList<Integer>> runSoftmaxExperiment(Graph<User> usergraph, 
			ArrayList<Double> tauVals) {
		ArrayList<ArrayList<Integer>> arraytauCumRew = new ArrayList<>();
		for (Double tau : tauVals) {
			computerSoftmax(usergraph, tau, 2000);
			arraytauCumRew.add(softmax.getRewards());
		}
		return arraytauCumRew;
	}
	
	/**
	 * @param usergraph
	 * @param eps
	 * @return
	 */
	public static ArrayList<ArrayList<Integer>> runEgreedyExperiment(Graph<User> usergraph, 
			ArrayList<Double> eps) {
		ArrayList<ArrayList<Integer>> arrayEpsCumRew = new ArrayList<>();
		for (Double ep : eps) {
			computeEgreedy(usergraph, ep, 2000);
			arrayEpsCumRew.add(egreedytest.getCumrewards());
		}
		return arrayEpsCumRew;
	}
	
	/**
	 * @param userList
	 */
	public static String ComputeUCB(Graph<User> usergraph, int numtrials) {
		
		UCB_RandAlgorithms ucbagent = new UCB_RandAlgorithms(usergraph, numtrials);
		dataobjucb = ucbagent.EvaluteUCBReward(); //evaluating UCB
		
		ArrayList<Double> aveReward = dataobjucb.getAveRewardsperAd();
		
		//drawing chart for egreedy
		DefaultCategoryDataset dataset = new DefaultCategoryDataset();
		int count = 0;
		for (Double rew : aveReward) {
			count++;
			dataset.setValue(rew, "Selection: " + count, "Ad " + count);
		}
		
		UtilityObject.viewChartRepres(dataset, "Average UCB Rewards for Various Ads");
		
		int i = 0;
		DefaultCategoryDataset datasetline = new DefaultCategoryDataset();
		for (double rew : dataobjucb.getAveReturnperIter()) {
			i++;
			if(i<100)
			datasetline.addValue(rew, "Average Reward", String.valueOf(i));
		}
		
		/*LineChart_Utilility lineChart = new LineChart_Utilility("Average Rewards for UCB",
				"Rewards for UCB over Iterations", datasetline);
		lineChart.ViewChart();*/
		
		//UCB Display
		String strRet = "";
		strRet += "***Upper Confidence Bound(UCB) Approach***\nTotal Reward: " + dataobjucb.getSumRew() + "\n";
		int maxindex = 0;
		int maxcount = 0;
		for (int y = 0; y < dataobjucb.getAveRewardsperAd().size(); y++) {
			strRet += "Ad Index: " + y + ", count = " + dataobjucb.getCounts().get(y) 
					+ " (Average probability: " + dataobjucb.getAveRewardsperAd().get(y) + ")\n";
			if(maxcount < dataobjucb.getCounts().get(y)) {
				maxcount = dataobjucb.getCounts().get(y);
				maxindex = y;
			}
		}
		strRet += "The maximum ad index is: " + maxindex + ", with count: " + maxcount;
		strRet += "\n";
		return strRet;
	}
	
	/**
	 * @param userList
	 */
	public static void computeRandom(Graph<User> usergraph, int numtrials) {
		UCB_RandAlgorithms randagent = new UCB_RandAlgorithms(usergraph, numtrials);
		randomApp = randagent.RandomSearchApproach(); //evaluating random
		
	}
	
	/**
	 * @param userList
	 * @param epsilon
	 * @param horizons
	 * @return 
	 */
	public static String computeEgreedy(Graph<User> usergraph, double epsilon, int numsim) {
		EgreedyAlgorithm egreedyagent = new EgreedyAlgorithm(epsilon, usergraph);
		// running the simulation with 10000 horizons and 1000 simulations
		int count = 0;
		for (@SuppressWarnings("unused") User us : usergraph.getAllVertices()) {
			count++;
		}
		//System.out.println(count);
		egreedytest = egreedyagent.ExecuteEgreedy(count, numsim);
		ArrayList<Double> aveReward = egreedytest.getAveRews();
		/*for (Object entry : egreedytest.entrySet()) {
			String ObjectLabel = ((Entry<String, String>) entry).getValue();
			aveReward = ((Entry<ArrayList<Double>, String>) entry).getKey();
            System.out.println("Data Label: " + ObjectLabel + "\nData = " + aveReward); 
            
		}*/
		
		//drawing chart for egreedy
		DefaultCategoryDataset dataset = new DefaultCategoryDataset();
		int coun = 0;
		for (Double rew : aveReward) {
			coun++;
			dataset.setValue(rew, "Selection: " + coun, "Ad " + coun);
		}
		
		UtilityObject.viewChartRepres(dataset, "Average E-Greedy Rewards for Various Ads");
		int maxindex = 0;
		int maxcount = 0;
		
		//Egreedy Display
		String strRet = "";
		strRet += "***Epsilon Greedy Approach***\nTotal Reward: " + egreedytest.getSumofReward() + "\n";

		for (int y = 0; y < egreedytest.getAveRews().size(); y++) {
			strRet += "Ad Index: " + y + ", count = " + egreedytest.getCountArr().get(y) 
					+ " (Average probability: " + egreedytest.getAveRews().get(y) + ")\n";
			if(maxcount < egreedytest.getCountArr().get(y)) {
				maxcount = egreedytest.getCountArr().get(y);
				maxindex = y;
			}
		}
		strRet += "The maximum ad index is: " + maxindex + ", with count: " + maxcount;
		strRet += "\n";
		
		return strRet;
	}
	
	/**
	 * @param userList
	 * @param epsilon
	 * @param numsim
	 */
	public static String computerSoftmax(Graph<User> usergraph, double epsilon, int numsim) {
		/*
		 * Boltzmann Exploration (Softmax Approach) 
		 */			
		int con = 0;
		int numarms = 0;
		for (User us : usergraph.getAllVertices()) {
			con++;
			numarms = us.getAdItems().size();
		}
		
		SoftmaxAlgorithm softmaxagent = new SoftmaxAlgorithm(usergraph, epsilon, numarms,  numsim, con);
		softmax = softmaxagent.testSimSoftmaxAlgo();
	
		//average rewards
		ArrayList<Double> aveRe = softmax.getAveRews();		
		
		//drawing chart for egreedy
		DefaultCategoryDataset dataset = new DefaultCategoryDataset();
		int count = 0;
		for (double rew : aveRe) {
			count++;
			dataset.setValue(rew, "Selection: " + count, "Ad " + count);
		}
		
		UtilityObject.viewChartRepres(dataset, "Average Softmax Rewards for Various Ads");
		int maxindex = 0;
		int maxcount = 0;
		String strRet = "";
		
		//UCB Display
		strRet += "***Boltzmann Exploration(Softmax) Approach***\nTotal Reward: " + 
					softmax.getSumofReward() + "\n";

		for (int y = 0; y < softmax.getAveRews().size(); y++) {
			strRet += "Ad Index: " + y + ", count = " + softmax.getCountArr().get(y) 
					+ " (Average probability: " + softmax.getAveRews().get(y) + ")\n";
			if(maxcount < softmax.getCountArr().get(y)) {
				maxcount = softmax.getCountArr().get(y);
				maxindex = y;
			}
		}
		strRet += "The maximum ad index is: " + maxindex + ", with count: " + maxcount;
		strRet += "\n";
		
		return strRet;
	}
}
