/**
 * 
 */
package honours.smartads_agent.datareader;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

/**
 * @author HERVE NG
 *
 */
public class SaveDataToFile {

	/**
	 * 
	 */
	public SaveDataToFile() {
		// TODO Auto-generated constructor stub
	}
	
	public static void saveObjectTFile() {
		
	}
	
	/**
	 * @param aveRews
	 * @return
	 */
	public static String retfileStringObj(ArrayList<Double> aveRews) {
		String data = "";
		int count = 0;
		for(double rw : aveRews){
			data += count + "," + rw + "\n"; 
			count++;
		}
		
		return data; 
	}
	
	/**
	 * @param aveRewUCB
	 * @param aveRewGreedy
	 * @param aveRewSoftmax
	 * @param aveRewCombined
	 * @param AdNames
	 * @return
	 */
	public static String storeAveRewardComparison(ArrayList<Double> aveRewUCB,
			ArrayList<Double> aveRewGreedy, ArrayList<Double> aveRewSoftmax,
			ArrayList<Double> aveRewCombined, ArrayList<String> AdNames) {
		String data = "";
		data += "Ad,UCB,E-Greedy,Softmax,Combined\n";
		for(int i = 0; i < aveRewUCB.size(); i++) {
			data += AdNames.get(i) + "," + aveRewUCB.get(i) + "," +
					aveRewGreedy.get(i) + "," + aveRewSoftmax.get(i) + ","
					+ aveRewCombined.get(i) + "\n";
		}
		
		return data;
	}
	
	/**
	 * @param aveRewperIter
	 * @return
	 */
	public static String storeAlgoRewPerIter(ArrayList<Double> aveRewperIter) {
		String data = "";
		data += "Iteration,E-Greedy=0.1\n";
		for(int i = 0; i < aveRewperIter.size(); i++) {
			data += i + "," + aveRewperIter.get(i) + "\n";
		}
		
		return data;
	}

	/**
	 * @param aveRewperIterUCB
	 * @param aveRewperIterEgreedy
	 * @param aveRewperIterSoftmax
	 * @return
	 */
	public static String storeAlgoRewPerIterComparison(ArrayList<Double> aveRewperIterUCB,
			ArrayList<Double> aveRewperIterEgreedy, ArrayList<Double> aveRewperIterSoftmax) {
		String data = "";
		data += "Iteration,UCB,E-Greedy,Softmax\n";
		for(int i = 0; i < aveRewperIterUCB.size(); i++) {
			data += i + "," + aveRewperIterUCB.get(i) + "," +
					aveRewperIterEgreedy.get(i) + "," + aveRewperIterSoftmax.get(i) + "\n";
		}
		
		return data;
	}
	
	/**
	 * @param RewperIterUCB
	 * @param RewperIterEgreedy
	 * @param RewperIterSoftmax
	 * @return
	 */
	public static String storeAlgoCumRewPerIterComparison(ArrayList<Integer> RewperIterUCB,
			ArrayList<Integer> RewperIterEgreedy, ArrayList<Integer> RewperIterSoftmax) {
		String data = "";
		data += "Iteration,UCB,E-Greedy,Softmax\n";

		for(int i = 0; i < RewperIterUCB.size(); i++) {
			int temp = i;
			if(temp%2==0) {
				temp = i;
			}
			else {
				temp = i-1;
			}
			data += i + "," + RewperIterUCB.get(i) + "," +
					RewperIterEgreedy.get(i) + "," + RewperIterSoftmax.get(temp) + "\n";
		}
		
		return data;
	}
	
	/**
	 * @param cumRew1
	 * @param cumRew2
	 * @param cumRew3
	 * @param cumRew4
	 * @param cumRew5
	 * @return
	 */
	public static String storeEgreedyComparison(ArrayList<Integer> cumRew1, ArrayList<Integer> cumRew2,
			ArrayList<Integer> cumRew3,ArrayList<Integer> cumRew4, ArrayList<Integer> cumRew5) {
		String data = "";
		data += "Iteration,Eps = 0.1,Eps = 0.2,Eps = 0.3,Eps = 0.4,Eps = 0.5\n";
		for(int i = 0; i < cumRew1.size(); i++) {
			data += i + "," + cumRew1.get(i) + "," + cumRew2.get(i) + "," +
					cumRew3.get(i) + "," + cumRew4.get(i) + "," + cumRew5.get(i) + "\n";
		}
		
		return data;
	}
	
	/**
	 * @param filename
	 * @param content
	 */
	public static void writeTofile(String filename, String content) {
		//writing data to file
		try {
			FileWriter fw = new FileWriter(filename);
			fw.write(content);
			fw.close();
		    System.out.println("Successfully wrote to the file: " + filename);
	    } catch (IOException e) {
	    	System.out.println("An error occurred.");
	    	e.printStackTrace();
	    } 
	}
	
	/**
	 * @param cumRew1
	 * @param cumRew2
	 * @param cumRew3
	 * @param cumRew4
	 * @param cumRew5
	 * @return
	 */
	public static String storeSoftmaxComparison(ArrayList<Integer> cumRew1, ArrayList<Integer> cumRew2,
			ArrayList<Integer> cumRew3,ArrayList<Integer> cumRew4, ArrayList<Integer> cumRew5) {
		String data = "";
		
		data += "Iteration,Tau = 0.1,Tau = 0.2,Tau = 0.3,Tau = 0.4,Tau = 0.5\n";
		for(int i = 0; i < 10000; i++) {
			int temp = i;
			if(temp%2==0) {
				temp = i;
			}
			else {
				temp = i+1;
			}
			data += i + "," + cumRew1.get(temp) + "," + cumRew2.get(temp) + "," +
					cumRew3.get(temp) + "," + cumRew4.get(temp) + "," + cumRew5.get(temp) + "\n";
		}
		
		return data;
	}
	
	/**
	 * @param plotfileName
	 */
	public static void openDataOutput(String plotfileName) {
		//calling the gnuplot batch script
		
		Path currentRelativePath = Paths.get("");
		String s = currentRelativePath.toAbsolutePath().toString();
		String batchfilepath = s + "\\data";
		String[] command = 
		{
			"cmd",
		};
		System.out.println(batchfilepath);
		Process p = null;
		try {
			p =  Runtime.getRuntime().exec(command);
			new Thread(new SyncPipe(p.getErrorStream(), System.err)).start();
			new Thread(new SyncPipe(p.getInputStream(), System.out)).start();
			PrintWriter stdin = new PrintWriter(p.getOutputStream());
			stdin.println("cd " + batchfilepath);
			stdin.println(plotfileName);
            stdin.close();
            p.waitFor();
		} catch (IOException | InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * @param imgName
	 */
	public static void readImageFiletoGUI(String imgName) {
		JFrame frame = new JFrame();
		ImageIcon icon = new ImageIcon(imgName);
		JLabel label = new JLabel(icon);
		frame.add(label);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.pack();
		frame.setVisible(true);
	}
	
}