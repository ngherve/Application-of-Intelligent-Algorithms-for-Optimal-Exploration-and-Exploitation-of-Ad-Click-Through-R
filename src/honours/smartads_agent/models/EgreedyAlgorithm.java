/**
 * 
 */
package honours.smartads_agent.models;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

import honours.smartads_agent.datareader.DataObjectGreedy;


/**
 * @author HERVE NG
 *
 */
public class EgreedyAlgorithm {
	
	private int numArms;
	private double epsilon;
	private ArrayList<Integer> counts; //counts of the pulls

	/**
	 * @return the numArms
	 */
	public int getNumArms() {
		return numArms;
	}

	/**
	 * @param numArms the numArms to set
	 */
	public void setNumArms(int numArms) {
		this.numArms = numArms;
	}

	/**
	 * @return the epsilon
	 */
	public double getEpsilon() {
		return epsilon;
	}

	/**
	 * @param epsilon the epsilon to set
	 */
	public void setEpsilon(double epsilon) {
		this.epsilon = epsilon;
	}

	/**
	 * @return the counts
	 */
	public ArrayList<Integer> getCounts() {
		return counts;
	}

	/**
	 * @param counts the counts to set
	 */
	public void setCounts(ArrayList<Integer> counts) {
		this.counts = counts;
	}

	/**
	 * @return the aveRewards
	 */
	public ArrayList<Double> getAveRewards() {
		return aveRewards;
	}

	/**
	 * @param aveRewards the aveRewards to set
	 */
	public void setAveRewards(ArrayList<Double> aveRewards) {
		this.aveRewards = aveRewards;
	}


	private ArrayList<Double> aveRewards; //Average Rewards
	private Graph<User> usergraph;


	/**
	 * @param epsilon
	 * @param numArms
	 * @param fileName
	 */
	public EgreedyAlgorithm(double epsilon, Graph<User> usergraph) {
		// TODO Auto-generated constructor stub
		this.usergraph = usergraph;
		//this.path = fileName;
		//this.numArms = numArms;
		for (User us : usergraph.getAllVertices()) { 
			this.numArms = us.getAdItems().size(); 
			break;
		}
		this.epsilon = epsilon;
		this.counts = new ArrayList<>();
		this.aveRewards = new ArrayList<>();
		for(int i = 0; i < numArms; i++) {
			aveRewards.add(0.0);
			counts.add(0);
		}
	}
	
	/**
	 * @return max index
	 */
	private int selectArm() {
		Random rand = new Random(); 
		int maxIndex = 0;
		if(rand.nextDouble() > this.epsilon) {
			double maxAve = aveRewards.get(0);
			for(int i = 0; i < numArms; i++) {
				if(maxAve <= aveRewards.get(i)) {
					maxIndex = i;
				}
			}
		} 
		else {
			maxIndex = rand.nextInt(numArms);
			//System.out.println(maxIndex);
		}
		return maxIndex;
	}
	
	/**
	 * @param armIndex
	 * @param reward
	 */
	private double updateReward(int armIndex, int reward) {
		double curIterRew = 0.0;
		int value = this.counts.get(armIndex);
		int n = ++value;
		counts.set(armIndex, value);
		double v = this.aveRewards.get(armIndex);
		curIterRew = ((v * (n - 1) * 1.0 + reward) / n); // store current iteration
		this.aveRewards.set(armIndex, curIterRew);
		
		return curIterRew;
	}
	
	/**
	 * @param rewardProb
	 * @return
	 */
	@SuppressWarnings("unused")
	private int BernoulliArm (double rewardProb) {
		//String path = "data/Ads_Optimisation.csv";
		//ArrayList<String> fileData = File_Reader.readCSVFile(path);
		if(Math.random() > rewardProb) {
			return 0;
		}
		else {
			return 1;
					//File_Reader.readValue(fileData, i, armIndex);
		}
	}
	

	/**
	 * @param horizon
	 * @param numSimulations
	 */
	public DataObjectGreedy ExecuteEgreedy(int horizon, int numSimulations) {
		/*int horizon = 10000; //number of pulls to simulate(iterations)
		int numSim = 1000;*/
		//ArrayList<String> fileData = File_Reader.readCSVFile(path);
		//read index value in file (either 0 or 1 for not clicked /clicked)
		//reward = File_Reader.readValue(fileData, i, ad);
		int maxSumRew = 0;
		ArrayList<Double> aveRewards = new ArrayList<>();
		ArrayList<Integer> maxcounts = new ArrayList<>();
		ArrayList<Integer> MaxchoosenArms = new ArrayList<>();
		ArrayList<Integer> Maxrewards = new ArrayList<>();
		ArrayList<Integer> MaxcumulativeRewards = new ArrayList<>();
		ArrayList<Double> IterAveRews = new ArrayList<>();
		HashMap<Object, String> dataMap = new HashMap<>(); 

		
		for(int y = 0; y < numSimulations; y++) {
			EgreedyAlgorithm algoruthm = new EgreedyAlgorithm(epsilon, usergraph);

			ArrayList<Integer> choosenArms = new ArrayList<>();
			ArrayList<Integer> rewards = new ArrayList<>();
			ArrayList<Integer> cumulativeRewards = new ArrayList<>();
			ArrayList<Double> CurIterAveRews = new ArrayList<>();

			/*ArrayList<BernoulliArmAd> arms = new ArrayList<>();
			for(int i = 0; i < numArms; i++) {
				arms.add(new BernoulliArmAd(Math.random() / 10));
			}*/
			
			for(int i = 0; i < horizon; i++) {
				choosenArms.add(0);
				rewards.add(0);
				cumulativeRewards.add(0);
				CurIterAveRews.add(0.0);
			}
			
			int cumulativeRew = 0;
			int reward = 0;
			//for(int i = 0; i < horizon; i++) {
			int i = 0;
			for (User us : usergraph.getAllVertices()) {
				int armIndex = algoruthm.selectArm();
				//BernoulliArmAd arm = arms.get(armIndex);
				//reward = arm.pull();
				reward = us.getAdItems().get(armIndex).getSelIndex();
				//reward = File_Reader.readValue(fileData, i, armIndex);
				CurIterAveRews.set(i, algoruthm.updateReward(armIndex, reward));
				
				choosenArms.set(i, armIndex);
				rewards.set(i, reward);
				cumulativeRew += reward;
				cumulativeRewards.set(i, cumulativeRew);
				i++;
			}	
	
			if(cumulativeRew >= maxSumRew) {
				maxSumRew = cumulativeRew;
				maxcounts = algoruthm.getCounts();
				aveRewards = algoruthm.getAveRewards();
				MaxchoosenArms = choosenArms;
				MaxcumulativeRewards = cumulativeRewards;
				Maxrewards = rewards;
				IterAveRews = CurIterAveRews;
			}
			
			/*map.put(choosenArms, "Chosen Rewards");
			map.put(rewards, "Rewards per Arm");
			map.put(cumulativeRewards, "Cumulative Rewards");
			
			dataMap.put(map, "Iteration: " + y);*/
		}
		
		int maxAd = findMaxCount(maxcounts, numArms);
		IterAveRews = UCB_RandAlgorithms.DetAveRewPerIterForBEstArm(maxAd, MaxchoosenArms, numSimulations);
		dataMap.put(aveRewards, "Average Rewards per Ad");
		DataObjectGreedy dataobj = new DataObjectGreedy(MaxchoosenArms, Maxrewards,
				MaxcumulativeRewards, maxcounts, aveRewards, maxSumRew, IterAveRews);
		System.out.println("\nMax: " + maxSumRew + "\n" + maxcounts + "\n" + aveRewards);
		
		return dataobj;
	}
	
	/**
	 * Finding maximum count
	 * 
	 */
	public static int findMaxCount(ArrayList<Integer> adIndices, int numAds) {
		//finding the maximum count of all the ad indices
		int maxcount = adIndices.get(0);
		int maxIndex = 0;
		for(int z = 0; z < numAds; z++) {
			if(maxcount <= adIndices.get(z)) {
				maxcount = adIndices.get(z);
				maxIndex = z;
			}
		}
		
		System.out.println("The maximum ad index is: " + maxIndex + ", with count: " + maxcount);
		return maxIndex;
	}

}
