package honours.smartads_agent.models;

import java.util.ArrayList;
import java.util.Random;

import honours.smartads_agent.datareader.DataObjectUCB;

public class UCB_RandAlgorithms {

	//Instance global variables
	
	private int sum_reward = 0;
	private double upperbound = 0;
	private int ad = 0;
	private double maxupperbound = 0;
	private int reward = 0;

	private int numAds;
	private Random rand;

	//arrays
	ArrayList<Integer> selectedAds = new ArrayList<>();		
	ArrayList<Integer> numofSelections = new ArrayList<>();	
	ArrayList<Integer> sumofRewards = new ArrayList<>();	
	ArrayList<Integer> adIndices = new ArrayList<>();	
	ArrayList<Integer> cumRewperIter = new ArrayList<>();	

	String maxCounts = " ";
	SinglyLinkedList<User> userList;
	Graph<User> usergraph;
	private int numtrials;
	
	/*
	 * Default Constructor
	 */
	public UCB_RandAlgorithms(Graph<User> usergraph, int numtrials) {
		//Initializing constants
		for (User us : usergraph.getAllVertices()) { 
			this.numAds = us.getAdItems().size(); 
			break;
		}
		
		this.usergraph = usergraph;
		this.numtrials = numtrials;
		
		InitialiseAgent();
	}
	
	/**
	 * Initialise Agent
	 * 
	 */
	public void InitialiseAgent() {
	
		sum_reward = 0;
		upperbound = 0;
		ad = 0;
		maxupperbound = 0;
		reward = 0;
		
		rand = new Random();
		selectedAds = new ArrayList<>();		
		//arrays
	
		numofSelections = new ArrayList<>();	
		sumofRewards = new ArrayList<>();	
		adIndices = new ArrayList<>();
		for(int i = 0; i < numAds; i++) {
			numofSelections.add(0);
			sumofRewards.add(0);
			adIndices.add(0);
		}
	}
	
	
	/**
	 * Evaluate the most clicked item
	 * @return Evaluation
	 */
	public DataObjectUCB EvaluteUCBReward() {
		//Using upper Conference (UBC) bound algorithm to find maximum reward
		InitialiseAgent();
				
		//reseting variables
		sum_reward = 0;
		selectedAds.clear();
		
		//DefaultCategoryDataset dataset = new DefaultCategoryDataset();
		ArrayList<Double> aveRew = new ArrayList<>();

		//looping through the ads
		int i = 0;
		for (User us : usergraph.getAllVertices()) {
			//if(i<= numtrials) {
				ad = 0;
				maxupperbound=0;
				for(int j = 0; j < numAds; j++) {
					if(numofSelections.get(j) > 0) {
						double aveReward = ((sumofRewards.get(j)*1.0) / numofSelections.get(j));
						double delta = Math.sqrt(2*Math.log(i+1) / numofSelections.get(j));
						//strRet += "Average Rewards: " + aveReward + " Delta: " + delta + "\n";
						//System.out.println("Ad " + j + ", User record: " + i + "Average Rewards: " + aveReward + " Delta: " + delta);
						upperbound = aveReward + delta;
							
					} else {
						upperbound = 1e300;
					}
					if(upperbound > maxupperbound) {
						maxupperbound = upperbound;
						ad = j;
					}
				}
				//aveRew.add(maxupperbound); //storing the average reward (confidence bound) per iteration
				//System.out.println(ad);
				selectedAds.add(ad); // adding the ad to selected list
				int currentAdSel = numofSelections.get(ad); //incrementing the value of selected ad index
				numofSelections.set(ad, currentAdSel + 1);
				//reading file;
				//ArrayList<String> fileData = File_Reader.readCSVFile(pathToCsv);
				//read index value in file (either 0 or 1 for not clicked /clicked)
				//reward = File_Reader.readValue(fileData, i, ad);
				reward = us.getAdItems().get(ad).getSelIndex();
				//System.out.println(reward);
				int currentsumReward = sumofRewards.get(ad);
				sumofRewards.set(ad, currentsumReward + reward);
				sum_reward += reward;
				cumRewperIter.add(sum_reward);
				i++;

			//}
		}
		
		//System.out.println("***Upper Confidence Bound (UCB) Approach***\nTotal Reward: " + sum_reward);
		//strRet += "***Upper Confidence Bound (UCB) Approach***\nTotal Reward: " + sum_reward + "\n";
		
		//Determining reward
		for (int x = 0; x < numAds; x++) {
			//counting the occurrence of each index (in this case 0 - 9)
			DetRewardPerAd(x);
		}
		
		//evaluating the average selection for each ad after 1500 trials
		ArrayList<Double> AveReturn = GenerateAveReturn(selectedAds, numtrials);
		//System.out.println(AveReturn);
		//Displaying the count for each ad
		for (int y = 0; y < numAds; y++) {
			System.out.println("Ad Index: " + y + ", count = " + adIndices.get(y) 
							+ " (Average probability: " + AveReturn.get(y) + ")");
			//dataset.setValue(AveReturn.get(y), "Algorithm Selections " + adIndices.get(y), "Ad " + y);
		}

		//determine max
		int bestarm = findMaxCount();
		aveRew = DetAveRewPerIterForBEstArm(bestarm, selectedAds, numtrials);

		//adding the data object to the map
		DataObjectUCB dataMap = new DataObjectUCB(AveReturn, aveRew, adIndices, selectedAds, cumRewperIter, sum_reward);

		return dataMap;
	}
	
	/**
	 * @param adSelection
	 * @param numTrials
	 * @return
	 */
	private ArrayList<Double> GenerateAveReturn(ArrayList<Integer> adSelection, int numTrials) {
		ArrayList<Double> selAds = new ArrayList<>();
		
		int curAdOccurence = 0;
		double curAdAveOccurence = 0.0;
		
		for(int ad = 0; ad < numAds; ad++) {
			curAdOccurence = countOccurence(ad, adSelection, numTrials);

			curAdAveOccurence = curAdOccurence*1.0 / numTrials;
			selAds.add(curAdAveOccurence);
		}
		
		return selAds;
	}
	
	/**
	 * @param ad
	 * @param AdSelections
	 * @param numTrials
	 * @return
	 */
	public static ArrayList<Double> DetAveRewPerIterForBEstArm(int ad, 
			ArrayList<Integer> AdSelections, int numTrials){
		
		ArrayList<Double> aveRew = new ArrayList<>();
		
		int numSel = 0;
		
		for(int t = 0; t < numTrials; t++) {
			int adSelTrial = AdSelections.get(t);
			if(adSelTrial == ad) {
				numSel++;
			}
			aveRew.add(numSel*1.0/t);
		}
		
		return aveRew;
	}
	
	/**
	 * @param ad
	 * @param AdSelections
	 * @param numTrials
	 * @return
	 */
	private int countOccurence(int ad, ArrayList<Integer> AdSelections, int numTrials) {
		int numSel = 0;
		
		for(int t = 0; t < numTrials; t++) {
			int adSelTrial = AdSelections.get(t);
			if(adSelTrial == ad) {
				numSel++;
			}
		}
		
		return numSel;
	}
	
	/**
	 * Evaluating the reward per ads 
	 * 
	 */
	private void DetRewardPerAd(int ad) {
		for(int j : selectedAds) {
			//counting clicks for specified ad
			if(j==ad) {
				int initcount = adIndices.get(ad);
				adIndices.set(ad, initcount += 1);				
			}
		}
		
	}
	
	/**
	 * Finding maximum count
	 * 
	 */
	private int findMaxCount() {
		//finding the maximum count of all the ad indices
		int maxcount = adIndices.get(0);
		int maxIndex = 0;
		for(int z = 0; z < numAds; z++) {
			if(maxcount <= adIndices.get(z)) {
				maxcount = adIndices.get(z);
				maxIndex = z;
			}
		}
		
		System.out.println("The maximum ad index is: " + maxIndex + ", with count: " + maxcount);
		maxCounts = "The maximum ad index is: " + maxIndex + ", with count: " + maxcount;
		return maxIndex;
	}

	/**
	 * @return the numAds
	 */
	public int getNumAds() {
		return numAds;
	}

	/**
	 * @param numAds the numAds to set
	 */
	public void setNumAds(int numAds) {
		this.numAds = numAds;
	}
	
	/**
	 * A Random Selection Strategy for optimizing rewards
	 * A less optimal method
	 * 
	 */
	public String RandomSearchApproach() {
		//reseting variables
		InitialiseAgent();
		String strRet = "";
		//looping through ads
		//for(int i = 0; i < TotNumClick; i++) {
		for (User us : usergraph.getAllVertices()) {
			ad = rand.nextInt(numAds);
			selectedAds.add(ad); // adding the ad to selected list			
			int currentAdSel = numofSelections.get(ad); //incrementing the value of selected ad index
			numofSelections.set(ad, currentAdSel + 1);
			//reading file;
			//ArrayList<String> fileData = File_Reader.readCSVFile(pathToCsv);
			//read index value in file
			reward = us.getAdItems().get(ad).getSelIndex();
			//reward = File_Reader.readValue(fileData, i, ad);
			//System.out.println(reward);
			int currentsumReward = sumofRewards.get(ad);
			sumofRewards.set(ad, currentsumReward + reward);
			sum_reward += reward;
		}
		
		System.out.println("\n\n***Random Selection Strategy***\nTotal Reward: " + sum_reward);
		strRet += "\n***Random Selection Strategy***\nTotal Reward: " + sum_reward;
		//Determining reward
		for (int j = 0; j < numAds; j++) {
			//counting the occurrence of each index (in this case 0 - 9)
			DetRewardPerAd(j);
		}
		
		//Displaying the count for each ad
		//evaluating the average selection for each ad after 1000 trials
		ArrayList<Double> AveReturn = GenerateAveReturn(selectedAds, numtrials);
				
		for (int y = 0; y < numAds; y++) {
			//double avProb = (adIndices.get(y) * 1.0)/TotNumClick;
			System.out.println("Ad Index: " + y + ", count = " + adIndices.get(y) 
							+ " (Average probability: " + AveReturn.get(y) + ")");
			strRet += "Ad Index: " + y + ", count = " + adIndices.get(y) 
			+ " (Average probability: " + AveReturn.get(y) + ")\n";
		}
		
		//determine max
		findMaxCount();
		
		return strRet;
	}

	/**
	 * @return the numtrials
	 */
	public int getNumtrials() {
		return numtrials;
	}

	/**
	 * @param numtrials the numtrials to set
	 */
	public void setNumtrials(int numtrials) {
		this.numtrials = numtrials;
	}
}
